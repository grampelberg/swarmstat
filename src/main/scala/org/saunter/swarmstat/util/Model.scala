/* Copyright (C) 2009 Thomas Rampelberg <pyronicide@saunter.org>

 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.

 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place - Suite 330, Boston, MA 02111-1307, USA.
 */

package org.saunter.swarmstat.util

import java.util.UUID
import org.apache.commons.codec.net.URLCodec

import net.liftweb.mapper._
import net.liftweb.util.Helpers._

class MappedStringPrimaryKey[T<:Mapper[T]] (
    override val fieldOwner: T, override val maxLen: Int)
      extends MappedStringIndex[T](fieldOwner, maxLen) {
  override def writePermission_? = true
  override def dbDisplay_? = true
  override def dbAutogenerated_? = false

  override def fieldCreatorString(
      dbType: DriverType, colName: String): String =
        colName+" CHAR("+maxLen+") NOT NULL "
}

class InfoHashPrimaryKey[T<:Mapper[T]] (
  override val fieldOwner: T) extends MappedStringPrimaryKey[T] (
    fieldOwner, 20) with LifecycleCallbacks {
  private var _saved = false
  override def dbIndexFieldIndicatesSaved_? = _saved
  override def afterSave = _saved = true
}

class UUIDPrimaryKey[T<:Mapper[T]] (
  override val fieldOwner: T) extends MappedStringPrimaryKey[T](
    fieldOwner, 16) {
  override def dbIndexFieldIndicatesSaved_? = (i_is_! != defaultValue)
  override lazy val defaultValue = {
    val uuid = UUID.randomUUID.toString.replaceAll("-", "").elements
    (new URLCodec).decode(uuid.zip(uuid).map(x=>"%"+x._1+x._2).mkString)
  }
}

class StringForeignKey[T<:Mapper[T],O<:KeyedMapper[String, O]](
  override val fieldOwner: T, foreign: => KeyedMetaMapper[String, O],
    maxLen: Int)
  extends MappedStringForeignKey[T,O](fieldOwner, foreign, maxLen) {
    override def fieldCreatorString(dbType: DriverType,
                                    colName: String): String =
    colName + " VARCHAR(" + maxLen + ")"
}

class InfoHashForeignKey[T<:Mapper[T],O<:KeyedMapper[String, O]](
  override val fieldOwner: T, foreign: => KeyedMetaMapper[String, O])
  extends StringForeignKey[T,O](fieldOwner, foreign, 20)

class UUIDForeignKey[T<:Mapper[T],O<:KeyedMapper[String, O]](
  override val fieldOwner: T, foreign: => KeyedMetaMapper[String, O])
  extends StringForeignKey[T,O](fieldOwner, foreign, 16)
